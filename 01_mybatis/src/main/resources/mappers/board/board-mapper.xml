<?xml version="1.0" encoding="UTF-8"?>

<!-- 230307 5교시 -->
<!-- 모든 설명들 member-mapping.xml 참고하기 -->

<!-- Mapper 설정 파일임을 선언 -->
<!-- 선언만 한다고 다 사용가능한 게 아니라 메인 설정 파일(mybatis-config)에 가서 등록을 해줘야 함 <mappers>에-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="boardMapper">	<!-- namespace : 외부에서 접근할 때 이 mapper.xml에 접근할 수 있게 해주는 식별자 속성 -->

<!-- 230307 8교시 -->
	<!-- 재사용 가능한 sql 조각을 만들어 중복되는 쿼리문 정리 -->
	<sql id="boardListSql">
		SELECT B.NO,
			   B.TITLE,
			   M.ID,
			   B.ORIGINAL_FILENAME,
			   B.RENAMED_FILENAME,
			   B.READCOUNT,
			   B.CREATE_DATE
		FROM BOARD B
		JOIN MEMBER M ON(B.WRITER_NO = M.NO) 
		WHERE B.STATUS = 'Y'
	</sql>

<!-- 230307 6교시-->
	<!-- 게시글 목록 조회 테스트 쿼리문 mybatis-config.xml <typeAliases>로 가기 -->	
	<resultMap id="boardListResultMap" type="Board">
		<id property="no" column="NO"/>				<!-- PK요소는 <id> -->
		<result property="title" column="TITLE"/>	<!-- 나머지는 <result> -->	
		<result property="writerId" column="ID"/>
		<result property="originalFileName" column="ORIGINAL_FILENAME"/>
		<result property="renamedFileName" column="RENAMED_FILENAME"/>
		<result property="readCount" column="READCOUNT"/>
		<result property="createDate" column="CREATE_DATE"/>
	</resultMap>


<!-- 230308 7교시 -->
	<!-- 게시글 상세 조회(댓글 포함) 테스트 쿼리문 mybatis-config.xml <typeAliases>로 가기 -->	
		<!-- <resultMap id="boardDetailResultMap" type="Board"> type : 쿼리를 수행하고 결과값으로 받는 데이터의 타입
			<id property="no" column="NO"/>
			<result property="title" column="TITLE"/>
			<result property="writeId" column="ID"/>
			<result property="readCount" column="READCOUNT"/>
			<result property="originalFileName" column="ORIGINAL_FILENAME"/>
			<result property="renamedFileName" column="RENAMED_FILENAME"/>
			<result property="content" column="CONTENT"/>
			<result property="type" column="TYPE"/>
			<result property="createDate" column="CREATE_DATE"/>
			<result property="modifyDate" column="MODIFY_DATE"/>
		</resultMap> -->
	<!--<resultMap id="boardListResultMap">과 너무 중복됨. 해결방법 <resultMap>에 extends 속성 사용-->
	<!--
		extends 속성 : 다른 resultMap을 상속하는 속성이다.
		
		<collection> : 컬렉션에 해당하는 필드에 조회 결과를 매핑할 때 사용한다.
			- javaType 속성은 컬렉션 필드의 자바 타입을 지정한다.
			- select 속성은 조회하고자 하는 select 쿼리문의 id를 입력한다.
			- column 속성은 조회하고자 하는 쿼리문의 파라미터를 전달할 때 사용한다. (파라미터가 여러 개일 때 콤마(,)로 구분)
		
		* 1:1 관계인 객체를 조회하고 싶다면 <associtation>을 사용해서 매핑해주면 된다. 사용법은 <collection>와 동일
		
			cf) <collection>	조회 결과가 여러 개일 때
				<associtation>	조회 결과가 하나일 때	
	-->
	<!-- extends 속성 덕분에 boardListResultMap에 없는 컬럼만 작성해 주면 됨 -->
	<!-- 방법 1) 쿼리문을 각각 만들어서 하나의 ResultMap에 매핑하는 방법 (mvc에서 한 방법) -->
	<!-- <resultMap id="boardDetailResultMap" type="Board" extends="boardListResultMap"> type : 쿼리를 수행하고 결과값으로 받는 데이터의 타입
		<result property="content" column="CONTENT"/>
		<result property="type" column="TYPE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
		
			<collection> : 컬렉션에 해당하는 필드의 조회결과를 매핑하는 요소
			<resultMap>에서 <collection>을 통해 다른 쿼리문을 수행시키고 그 결과를 매핑
		
		selectRepliesByNo(댓글 목록 조회하는 쿼리문)을 수행시키고 그 결과를 replies라는 필드에 매핑 column : NO값을 쿼리문의 파라미터로 담아주기위한 속성
		<collection property="replies" javaType="arraylist" select="selectRepliesByNo" column="NO"/>
	</resultMap> -->				<!-- javaType : property의 타입 지정. arraylist(마이바티스 내장 별칭) -->


<!-- 230309 1교시 -->
	<!-- 게시글 상세 조회(댓글 포함) 테스트 쿼리문 mybatis-config.xml <typeAliases>로 가기 -->
	<!-- 방법 2) 하나의 쿼리문을 만들어서 하나의 ResultMap에서 매핑하는 방법 -->
	<resultMap id="boardDetailResultMap" type="Board" extends="boardListResultMap"> <!-- type : 쿼리를 수행하고 결과값으로 받는 데이터의 타입 -->
		<result property="content" column="CONTENT"/>
		<result property="type" column="TYPE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
		<collection property="replies" javaType="arraylist" columnPrefix="R_" resultMap="replyResultMap"/>
		<!-- selectBoardByNo 쿼리문을 보면 R_로 시작하는 컬럼 댓글에 대한 컬럼들.
			 columnPrefix=""을 컬럼앞에 붙여서 resultMap=""을 타게 해 그 값을 property=""의 필드에 매핑 (다시 정리)-->
	</resultMap>
	

<!-- 230308 8교시 -->
	<!-- 게시글 상세 조회(댓글 포함) 테스트 댓글쪽까지 구현 -->
	<!-- <resultMap> : DB의 컬럼명과 CLASS의 필드명이 달라서 값이 들어가지 않아 직접 매핑시켜주는 요소 -->
	<resultMap id="replyResultMap" type="Reply">	<!-- type : mybatis-config.xml <typeAliases> -->
		<id property="no" column="NO"/>				<!-- <resultMap id="boardDetailResultMap">에서 columnPrefix="R_"을 줬기 때문에 이 컬럼에서는 굳이 R_NO라고 적지 않아도 됨 -->
		<result property="boardNo" column="BOARD_NO"/>
		<result property="content" column="CONTENT"/>
		<result property="writerId" column="ID"/>
		<result property="createDate" column="CREATE_DATE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>		
	</resultMap>	



	
<!-- 230307 5교시 -->
	<!-- 게시글 수 조회 테스트 쿼리문-->
	<select id="selectBoardCount" resultType="_int">	<!-- resultType : 쿼리문을 수행시키고 나서 반환하는 자료형 적어주기. count 개수 나오니 _int -->
		SELECT COUNT(*) FROM BOARD WHERE STATUS='Y'
	</select>

<!-- 230307 6교시-->
	<!-- 게시글 목록 조회 테스트 쿼리문. 상단의 <resultMap>으로 -->	
	<select id="selectAll" resultMap="boardListResultMap">
		<!-- SELECT B.NO,
			   B.TITLE,
			   M.ID,
			   B.ORIGINAL_FILENAME,
			   B.RENAMED_FILENAME,
			   B.READCOUNT,
			   B.CREATE_DATE
		FROM BOARD B JOIN MEMBER M ON(B.WRITER_NO = M.NO) 
		WHERE B.STATUS = 'Y' -->
<!-- 230307 8교시 -->
	<!-- 재사용 가능한 sql 조각을 만들어 중복되는 쿼리문 정리 -->
		<include refid="boardListSql"/>
		ORDER BY B.NO DESC
	</select>


<!-- 230307 8교시-->
	<!-- 게시글 수 조회(검색 기능 적용) 테스트 쿼리문 -->
	<select id="selectBoardCountByKeyWord" resultType="_int">
		<!-- <if> 없는 쿼리문은 전체 게시글 수 조회하는 쿼리문-->
		SELECT COUNT(*)
		FROM BOARD B
		JOIN MEMBER M ON (B.WRITER_NO = M.NO)
		WHERE B.STATUS='Y'
		<if test="writer != null">	<!-- test 안의 writer는 boardDao의 Map<키, 값>의 키값! | null이 아닐 때 추가 시킬 쿼리문 <if> 안에 넣기 -->
			AND M.ID LIKE '%' || #{writer} || '%'
		</if>
		<if test="title != null">
			AND B.TITLE LIKE '%' || #{title} || '%'
		</if>
		<if test="content != null">
			AND B.CONTENT LIKE '%' || #{content} || '%'
		</if>		
	</select>
	
<!-- 230307 7교시-->
	<!-- 게시글 목록 조회(검색 기능 적용) 테스트 쿼리문. 상단의 <resultMap>으로 -->
	<select id="selectAllByKeyWord" resultMap="boardListResultMap">
		<!-- SELECT B.NO,
			   B.TITLE,
			   M.ID,
			   B.ORIGINAL_FILENAME,
			   B.RENAMED_FILENAME,
			   B.READCOUNT,
			   B.CREATE_DATE
		FROM BOARD B JOIN MEMBER M ON(B.WRITER_NO = M.NO) 
		WHERE B.STATUS = 'Y' -->
<!-- 230307 8교시 -->
	<!-- 재사용 가능한 sql 조각을 만들어 중복되는 쿼리문 정리 -->
		<!-- <include refid="boardListSql"/> -->
		<!--
			동적 쿼리
			1. 다중 <if>를 활용한 검색 기능 구현
		-->
		<!-- 파라미터로 넘어오는 값을 확인해 null인지 체크해서 null이면 <if>없는 쿼리문 수행,
			 값이 있으면 그 값을 조회하는 <if>문 더해 쿼리문 수행 -->
		<!-- <if test="writer != null">	test 안의 writer는 boardDao의 Map<키, 값>의 키값! | null이 아닐 때 추가 시킬 쿼리문 <if> 안에 넣기
			AND M.ID LIKE '%' || #{writer} || '%'
		</if>
		<if test="title != null">
			AND B.TITLE LIKE '%' || #{title} || '%'
		</if>
		<if test="content != null">
			AND B.CONTENT LIKE '%' || #{content} || '%'
		</if>
		ORDER BY B.NO DESC -->

		
<!-- 230308 1교시 동적쿼리 -->		
		<!--
			동적 쿼리
			2. <choose>, <when>, <otherwise>를 활용한 검색 기능 구현
		-->
		<!--
		<include refid="boardListSql"/>
		<choose>
			<when test="writer != null">
				AND M.ID LIKE '%' || #{writer} || '%'
			</when>
			<when test="title != null">
				AND B.TITLE LIKE '%' || #{title} || '%'
			</when>
			<when test="content != null">
				AND B.CONTENT LIKE '%' || #{content} || '%'
			</when>
			<otherwise>				
				위의 조건 중 하나라도 만족하지 않는 경우 포함될 쿼리문 작성. 생략 가능
			</otherwise>
		</choose>
		ORDER BY B.NO DESC
		-->
		
<!-- 230308 2교시 동적쿼리 -->		
		<!--
			동적 쿼리
			3. <where>와 다중 <if>를 활용한 검색 기능 구현
		-->
		<!-- SELECT B.NO,
			   B.TITLE,
			   M.ID,
			   B.ORIGINAL_FILENAME,
			   B.RENAMED_FILENAME,
			   B.READCOUNT,
			   B.CREATE_DATE
		FROM BOARD B
		JOIN MEMBER M ON(B.WRITER_NO = M.NO) 
		<where>
			<if test="writer != null">	test 안의 writer는 boardDao의 Map<키, 값>의 키값!
				M.ID LIKE '%' || #{writer} || '%'
			</if>
			<if test="title != null">
				AND B.TITLE LIKE '%' || #{title} || '%'
			</if>
			<if test="content != null">
				AND B.CONTENT LIKE '%' || #{content} || '%'
			</if>
			AND B.STATUS = 'Y'
		</where>
		ORDER BY B.NO DESC -->
		
		<!--
			동적 쿼리
			4. <trim>과 다중 <if>를 활용한 검색 기능 구현
		-->
		SELECT B.NO,
			   B.TITLE,
			   M.ID,
			   B.ORIGINAL_FILENAME,
			   B.RENAMED_FILENAME,
			   B.READCOUNT,
			   B.CREATE_DATE
		FROM BOARD B
		JOIN MEMBER M ON(B.WRITER_NO = M.NO) 
		<trim prefix="WHERE" prefixOverrides="AND|OR">	<!-- prefix 뒤에 prefixOverrides가 오면 지워라 -->
			<if test="writer != null">	<!-- test 안의 writer는 boardDao의 Map<키, 값>의 키값! -->
				M.ID LIKE '%' || #{writer} || '%'
			</if>
			<if test="title != null">
				AND B.TITLE LIKE '%' || #{title} || '%'
			</if>
			<if test="content != null">
				AND B.CONTENT LIKE '%' || #{content} || '%'
			</if>
			AND B.STATUS = 'Y'
		</trim>
		ORDER BY B.NO DESC	
	</select>
	

<!-- 230308 3교시 -->
	<!-- 게시글 수 조회(검색 기능 적용 2) 테스트 -->
	<select id="selectBoardCountByKeyWord2" resultType="_int">
		SELECT COUNT(*)
		FROM BOARD B
		JOIN MEMBER M ON (B.WRITER_NO = M.NO)
		WHERE B.STATUS='Y'
		<if test="type != null">
			<choose>
				<when test='type.equals("writer")'> <!-- equals()메소드로 문자열 비교. "writer"라는 문자열과 type의 값이 같냐 -->
					AND M.ID LIKE '%' || #{keyword} || '%'	<!-- 타입이 "writer"면 keyword를 포함하고 있는 데이터 조회 -->
				</when>
				<when test='type.equals("title")'>
					AND B.TITLE LIKE '%' || #{keyword} || '%'
				</when>
				<when test='type.equals("content")'>
					AND B.CONTENT LIKE '%' || #{keyword} || '%'
				</when>
			</choose>
		</if>
	</select>

<!-- 230308 2교시-->
	<!-- 게시글 목록 조회(검색 기능 적용2) 테스트 쿼리문. 상단의 <resultMap>으로 -->
	<select id="selectAllByKeyWord2" resultMap="boardListResultMap">
		<include refid="boardListSql"/>
		<!-- type이 null이 아닌지부터 체크! null이면 if 문 안 돌아서 전체 게시글 조회함 -->
		<if test="type != null">
			<!-- type도 종류가 세 가지라서 choose 구문 -->
			<choose>		<!-- r 왜 test="" 아니고 ''?? 안에서 문자열 큰따옴표로 묶어줘야 해서 작은따옴표 사용함 -->
				<when test='type.equals("writer")'> <!-- equals()메소드로 문자열 비교. writer라는 문자열과 type의 값이 같냐 -->
					AND M.ID LIKE '%' || #{keyword} || '%'	<!-- 타입이 writer면 keyword를 포함하고 있는 데이터 조회 -->
				</when>
				<when test='type.equals("title")'>
					AND B.TITLE LIKE '%' || #{keyword} || '%'
				</when>
				<when test='type.equals("content")'>
					AND B.CONTENT LIKE '%' || #{keyword} || '%'
				</when>
			</choose>
		</if>
		ORDER BY B.NO DESC
	</select>

	
<!-- 230308 5교시 -->
	<!-- 게시글 수 조회(필터 기능 적용) 테스트 페이징처리 2페이지 출력해보기 -->
	<select id="selectBoardCountByFilters" resultType="_int">
		SELECT COUNT(*)
		FROM BOARD B
		JOIN MEMBER M ON (B.WRITER_NO = M.NO)
		WHERE B.STATUS='Y'
		<!-- <if test="filters != null"> -->			<!-- Dao에서 Map에 담아서 전달하면 filters라고 직접 사용 가능함 -->
		<!-- <if test="array != null"> -->	<!-- Dao에서 필터를 배열로 줄 때 배열명(filters)을 직접 쓰면 값을 받아오지 못함. array라고 줘야 함 -->
		<if test="list != null">	<!-- 변수명이 뭐든 상관없이 Dao에서 List로 값을 넘기면 list라고 줘야 함 -->
			<!--
				AND B.TYPE IN ('B2', 'B3')	/	
				AND B.TYPE IN ('B3')
				이 식을 아래 foreach를 써서 반복해서 조회. 왜? 배열이니까. 배열이 몇 개가 있는지 모르니 반복문을 사용해줌
			-->
			AND B.TYPE IN
			<foreach item="filter" collection="list" open="(" separator="," close=")">	<!-- collection에 filters, array, list 써줌 DAO에서 뭘 썼냐에 따라 다르게 작성 -->
					<!-- collection의 값(<if>의 test 속성의 값(list))을 반복해서 item에 담아줌 -->
				#{filter}<!-- #{item 변수명} -->
			</foreach>
		</if>
	</select>
	
<!-- 230308 4교시 5교시-->
	<!-- 게시글 목록 조회(필터 기능 적용) 테스트 쿼리문. 상단의 <resultMap>으로 -->
	<!-- 동적 쿼리 <foreach> -->
	<select id="selectAllByFilters" parameterType="map" resultMap="boardListResultMap">
		<include refid="boardListSql"/>
		<!-- filters에 값이 있을 때 if문 돌리면 돼서 조건을 filters != null로 줌 -->
		<if test="filters != null">			<!-- Dao에서 Map에 담아서 전달하면 filters라고 직접 사용 가능함 -->
		<!-- <if test="array != null"> -->	<!-- Dao에서 필터를 배열로 줄 때 배열명(filters)을 직접 쓰면 값을 받아오지 못함. array라고 줘야 함 -->
		<!-- <if test="list != null"> -->	<!-- 변수명이 뭐든 상관없이 Dao에서 List로 값을 넘기면 list라고 줘야 함 -->
			<!--
				AND B.TYPE IN ('B2', 'B3')	/	
				AND B.TYPE IN ('B3')
				이 식을 아래 foreach를 써서 반복해서 조회. 왜? 배열이니까. 배열이 몇 개가 있는지 모르니 반복문을 사용해줌
			-->
			AND B.TYPE IN
			<foreach item="filter" collection="filters" open="(" separator="," close=")">	<!-- collection에 filters, array, list 써줌 DAO에서 뭘 썼냐에 따라 다르게 작성 -->
					<!-- collection의 값(<if> test 속성의 값)을 반복해서 담아서 item에 담아줌 -->
				#{filter}<!-- #{item 변수명} -->
			</foreach>
		</if>
		ORDER BY B.NO DESC
	</select>
	

<!-- 230308 7교시 8교시 -->
	<!-- 게시글 상세 조회(댓글 포함) 테스트 쿼리문 댓글쪽까지 구현 -->
	<!--
		방법1) 쿼리문을 각각 만들어서 하나의 ResultMap에 매핑하는 방법 (mvc에서 한 방법)
	-->
		<!-- 상세 게시글 가져오는 쿼리문 -->
		<!-- <select id="selectBoardByNo" parameterType="_int" resultMap="boardDetailResultMap">	parameterType : Dao에서 받아오는 파라미터(no)의 자료형 적어주기
			SELECT  B.NO,
					B.TITLE,
					M.ID,
					B.READCOUNT,
					B.ORIGINAL_FILENAME,
					B.RENAMED_FILENAME,
					B.CONTENT,
					B.TYPE,
					B.CREATE_DATE,
					B.MODIFY_DATE
			FROM BOARD B
			JOIN MEMBER M ON(B.WRITER_NO = M.NO)
			WHERE B.STATUS = 'Y' AND B.NO=#{no}		#{no} : Dao에서 받아오는 파라미터의 변수명을 받아줌
		</select> -->
		<!-- 댓글 목록 가져오는 쿼리문 -->
		<!-- 아래의 쿼리문은 <resultMap id="boardDetailResultMap">에서 실행시킴 -->
		<!-- <select id="selectRepliesByNo" parameterType="_int" resultMap="replyResultMap">
			SELECT R.NO,
				   R.BOARD_NO,
				   R.CONTENT,
				   M.ID,
				   R.CREATE_DATE,
				   R.MODIFY_DATE
			FROM REPLY R
			JOIN MEMBER M ON(R.WRITER_NO = M.NO)
			WHERE R.STATUS='Y' AND BOARD_NO=#{no}
			ORDER BY R.NO DESC
		</select> -->
		
<!-- 230309 1교시 -->
	<!-- 게시글 상세 조회(댓글 포함) 테스트 쿼리문 댓글쪽까지 구현 -->
	<!--
		방법 2) 하나의 쿼리문을 만들어서 하나의 ResultMap에서 매핑하는 방법
		
		게시글 하나에 여러 댓글이 있을 때 한 게시물만 나올 수 있게 만듦(Board(필드명, 필드명, 필드명, replies()))
	-->
		<select id="selectBoardByNo" parameterType="_int" resultMap="boardDetailResultMap">
			SELECT B.NO,
			       B.TITLE, 
			       M.ID, 
			       B.READCOUNT,
			       B.ORIGINAL_FILENAME,
			       B.RENAMED_FILENAME,
			       B.CONTENT,
			       B.TYPE,
			       B.CREATE_DATE,
			       B.MODIFY_DATE,
			       R.NO AS "R_NO",						<!-- 아래 댓글 컬럼 컬럼명이 똑같은 컬럼이 많아서 별칭 부여 -->
			       R.BOARD_NO AS "R_BOARD_NO",
			       R.CONTENT AS "R_CONTENT",
			       M2.ID AS "R_ID",
			       R.CREATE_DATE AS "R_CREATE_DATE",
			       R.MODIFY_DATE AS "R_MODIFY_DATE"
			FROM BOARD B
			JOIN MEMBER M ON(B.WRITER_NO = M.NO)
			LEFT OUTER JOIN REPLY R ON(B.NO = R.BOARD_NO)		<!-- LEFT 'OUTER' JOIN : 댓글이 없으면 REPLY쪽 컬럼 조회 안 됨 -->
			LEFT OUTER JOIN MEMBER M2 ON(R.WRITER_NO = M2.NO)	<!-- INNER OUTER JOIN 공부해서 이해해보기! -->
			WHERE B.STATUS = 'Y' AND B.NO = #{no}
		</select>


<!-- 230309 2교시 -->
	<!-- 게시글 등록 테스트 쿼리문 -->
	<insert id="insertBoard" parameterType="Board"
		useGeneratedKeys="true" keyProperty="no" keyColumn="NO">
		<!-- PK키값을 조회해서 INSERT하는 속성
				useGeneratedKeys="true" true : PK키값을 조회하겠다
				keyProperty="no" 		no에 넣겠다.
				keyColumn="NO" 			NO를 조회해서
		-->
		INSERT INTO BOARD (
				NO,
				WRITER_NO,
				TITLE,
				CONTENT,
				ORIGINAL_FILENAME,
				RENAMED_FILENAME			
		)
		VALUES(
			SEQ_BOARD_NO.NEXTVAL,
		    #{writerNo},
		    #{title},
		    #{content},
		    #{originalFileName},
		    #{renamedFileName}
		)	<!-- DEFAULT 값이 들어가는 컬럼은 삭제. 없어도 자동으로 들어감 -->
	</insert>	
	
<!-- 230309 3교시 -->
	<!-- 게시물 수정 테스트 쿼리문
		 동적 쿼리 <set>과 다중 <if>를 활용한 update 구문 작성
		 동적 쿼리 <trim>과 다중 <if>를 활용한 update 구문 작성 -->
	<update id="updateBoard" parameterType="Board">	<!-- parameterType : 파라미터를 쿼리문에서 사용하기 때문에 타입 지정 -->
		<!--
			1. 기존 JDBC에서 사용하던 쿼리를 활용한 UPDATE 구문 작성
		-->
		<!-- UPDATE BOARD 
		SET
			TITLE = #{title},
			CONTENT = #{content},
			ORIGINAL_FILENAME = #{originalFileName},
			RENAMED_FILENAME = #{renamedFileName},
			MODIFY_DATE = SYSDATE
		WHERE NO = #{no} -->
		
		<!-- 파라미터 값 여부에 따라 값이 있으면 구문에 포함하고 값이 없으면 구문에 포함시키지 않도록 만들기 -->
		<!--
			2. 동적 쿼리 <set>과 다중 <if>를 활용한 update 구문 작성
			
			<set>
				- UPDATE 쿼리문의 SET절을 동적으로 구현할 때 사용하는 요소이다.
				- UPDATE 하고자 하는 컬럼을 동적으로 포함시키기 위해 사용한다.
				- set 요소는 SET 키워드를 붙이고 불필요한 콤마를 제거한다
		-->
		<!-- UPDATE BOARD
		<set>
			<if test="title != null">
				TITLE = #{title},
			</if>
			<if test="content != null">
				CONTENT = #{content},
			</if>
			<if test="originalFileName != null">
				ORIGINAL_FILENAME = #{originalFileName},
			</if>
			<if test="renamedFileName != null">
				RENAMED_FILENAME = #{renamedFileName},
			</if>
			MODIFY_DATE = SYSDATE
		</set>
		WHERE NO = #{no} -->
		
		<!--
			3. 동적 쿼리 <trim>과 다중 <if>를 활용한 update 구문 작성
			
			<trim>
				- 쿼리문의 특정 구문을 추가하거나 없앨 때 사용하는 요소이다.
				- 요소 안의 쿼리문이 완성될 때 처음 시작할 단어(prefix)와
				  시작 시 제거해야 할 단어(prefixOverrides)를 명시하여
				  where 요소와 동일한 기능을 하도록 구현할 수 있다.
				- 요소 안의 쿼리문이 완성될 때 처음 시작할 단어(prefix)와
				  마지막에 제거해야 할 단어(suffixOverrides)를 명시하여
				  set 요소와 동일한 기능을 하도록 구현할 수 있다.
		-->
		UPDATE BOARD
		<trim prefix="SET" suffixOverrides=",">
			<if test="title != null">
				TITLE = #{title},
			</if>
			<if test="content != null">
				CONTENT = #{content},
			</if>
			<if test="originalFileName != null">
				ORIGINAL_FILENAME = #{originalFileName},
			</if>
			<if test="renamedFileName != null">
				RENAMED_FILENAME = #{renamedFileName},
			</if>
			MODIFY_DATE = SYSDATE
		</trim>
		WHERE NO = #{no}
	</update>

<!-- 230309 4교시 -->
	<!-- 게시글 삭제 테스트 쿼리문 -->
	<update id="updateStatus" parameterType="map">
		UPDATE BOARD SET STATUS = #{status} WHERE NO = #{no}
	</update>
	
</mapper>